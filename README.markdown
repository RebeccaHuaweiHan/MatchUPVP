# Volunteer-Organization Matching Project

## Overview
This Python project processes volunteer and organization data to match volunteers with organizations based on shared causes. It then merges the matched data with a contact list to produce an enriched contact list with organization details (titles and permalinks). The project is designed for use in volunteer management systems, such as those used by nonprofits or community platforms, to connect volunteers with relevant organizations and enhance contact lists for outreach.

## Features
- **Data Ingestion**: Reads volunteer and organization data from an Excel file (`UserOrganizationInformation.xlsx`).
- **Data Cleaning**: Processes and standardizes text fields (e.g., extracting quoted text, converting pipe-separated values to comma-separated, and replacing specific phrases).
- **Volunteer-Organization Matching**: Matches volunteers to organizations based on shared causes using word overlap.
- **Contact List Enrichment**: Merges matched organization details with a contact list based on email addresses.
- **Output**: Saves the enriched contact list to an Excel file (`UpdatedContactList.xlsx`).

## Requirements
- Python 3.7+
- Required libraries:
  ```bash
  pandas
  ```
- Input files:
  - `UserOrganizationInformation.xlsx`: Contains two sheets: `VolunteerUsers` (volunteer data) and `Organizations` (organization data).
  - `ContactList45.csv`: Contact list with `CONTACT ID` and `EMAIL` columns.
  - `Vol_matchedOrg2.xlsx`: Pre-processed volunteer data with matched organizations (generated by the script if uncommented).

## Installation
1. Clone the repository:
   ```bash
   git clone <repository-url>
   cd <repository-directory>
   ```
2. Install dependencies:
   ```bash
   pip install pandas
   ```
3. Ensure input files (`UserOrganizationInformation.xlsx`, `ContactList45.csv`) are in the project directory.

## Usage
1. **Prepare Input Files**:
   - Ensure `UserOrganizationInformation.xlsx` has the required sheets and columns:
     - `VolunteerUsers`: Columns like `ID`, `User Email`, `volunteer-bio`, `professional-designations`, `volunteer-skills`, `volunteer-causes`, `volunteer-activities`.
     - `Organizations`: Columns like `ID`, `organization-email-address`, `Causes`, `Title`, `Permalink`.
   - Ensure `ContactList45.csv` contains `CONTACT ID` and `EMAIL` columns.

2. **Run the Script**:
   - The main script (`main.py`) executes the `merge_contact_with_volunteers` function by default, which merges a contact list with pre-processed volunteer data (`Vol_matchedOrg2.xlsx`) and outputs `UpdatedContactList.xlsx`.
   - To generate `Vol_matchedOrg2.xlsx`, uncomment the following lines in the `if __name__ == '__main__':` block:
     ```python
     Vol_DF, Org_DF = read_in_data()
     Vol_DF['MatchedOrg'] = Vol_DF['volunteer-causes'].apply(get_matching_ids_and_counts, args=(Org_DF, 'ID', 'Causes'))
     Vol_DF = add_top_n_matched_org_info(Vol_DF, Org_DF, n=2, matched_col='MatchedOrg', id_col='ID', title_col='Title', link_col='Permalink')
     Vol_DF.to_excel("Vol_matchedOrg2.xlsx", index=False)
     ```
   - Run the script:
     ```bash
     python main.py
     ```

3. **Output**:
   - The script generates `UpdatedContactList.xlsx`, containing the merged contact list with matched organization titles and permalinks.

## Script Details
### Key Functions
- `read_in_data()`: Reads and processes volunteer and organization data from Excel, cleaning text fields (e.g., extracting quoted text, standardizing cause formats).
- `count_words_in_string(string_a, string_b)`: Counts word overlaps between two strings (used for matching causes).
- `get_matching_ids_and_counts(string_a, df)`: Matches a volunteer's causes to organization causes, returning sorted matches by count.
- `add_top_n_matched_org_info(vol_df, org_df, n=2)`: Adds top `n` matched organization titles and permalinks to the volunteer DataFrame.
- `merge_contact_with_volunteers(contact_csv, vol_excel)`: Merges contact list with volunteer data based on email addresses.
- `Read_from_google()`: Unused function for reading data from a Google Sheet (requires authentication and `gspread` library).

### Data Processing
- **Volunteer Data**: Extracts and cleans `volunteer-skills`, `volunteer-causes`, and `volunteer-activities` by processing quoted text and standardizing phrases (e.g., "Children, Youth, Family" to "Children Youth and Family").
- **Organization Data**: Converts pipe-separated `Causes` to comma-separated and applies text standardization.
- **Matching**: Matches volunteers to organizations based on word overlap in causes, selecting the top 2 matches by default.
- **Merging**: Combines contact list with matched volunteer data using email addresses.

## Notes
- The Google Sheets functionality (`Read_from_google`) is commented out and requires additional setup (e.g., Google API credentials) to use.
- Matching is based on simple word overlap, which may not handle synonyms or complex relationships between causes.
- Ensure input files are correctly formatted to avoid errors during data processing.

## Future Improvements
- Enhance matching logic to account for synonyms or semantic similarity (e.g., using NLP libraries like `nltk` or `spacy`).
- Add error handling for missing or malformed input files.
- Implement Google Sheets integration as an alternative data source.
- Allow configurable `n` for the number of matched organizations.

## License
This project is licensed under the MIT License.